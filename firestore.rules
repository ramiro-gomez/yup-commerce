rules_version = '2';
service cloud.firestore {
	match /databases/{database}/documents {
		function onlyContainsLetters(sentence) {
			return sentence is string &&
			sentence.matches('^[a-zA-Z]+$');
		}
		function matchProductRegex(sentence) {
			return sentence is string &&
			sentence.matches('^[a-zA-Z][a-zA-Z\\s-]*$'); // Starts with a letter and only contains spaces, leterrs or hyphen minus
		}
		match /users/{userId} {
			function userDataIsValid() {
				return request.resource.data.size() == 2 &&
				request.auth.uid == userId &&
				onlyContainsLetters(request.resource.data.firstName) &&
				onlyContainsLetters(request.resource.data.lastName);
			}
			allow get: if request.auth.uid == userId;
			allow create: if userDataIsValid();
		}
		match /products/{productId} {
			function productDataIsValid() {
				return matchProductRegex(request.resource.data.name) &&
				matchProductRegex(request.resource.data.category) &&
				request.resource.data.price is number &&
				request.resource.data.price > 0;
			}
			function isTheOwner() {
				return resource.data.createdBy == request.auth.uid;
			}
			allow read;
			allow create: if request.resource.data.size() == 4 &&
				productDataIsValid() &&
				request.resource.data.createdBy is string &&
				request.resource.data.createdBy == request.auth.uid;
			allow update: if isTheOwner() &&
				request.resource.data.size() == 4 &&
				productDataIsValid();
			allow delete: if isTheOwner();
		}
	}
}